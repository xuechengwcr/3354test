package cn.projects.team.demo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.projects.team.demo.model.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone1 = new Property(2, String.class, "phone1", false, "PHONE1");
        public final static Property Phone2 = new Property(3, String.class, "phone2", false, "PHONE2");
        public final static Property Phone3 = new Property(4, String.class, "phone3", false, "PHONE3");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Letters = new Property(6, String.class, "letters", false, "LETTERS");
        public final static Property GroupId = new Property(7, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property IsBlack = new Property(8, Boolean.class, "isBlack", false, "IS_BLACK");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE1\" TEXT," + // 2: phone1
                "\"PHONE2\" TEXT," + // 3: phone2
                "\"PHONE3\" TEXT," + // 4: phone3
                "\"ICON\" TEXT," + // 5: icon
                "\"LETTERS\" TEXT," + // 6: letters
                "\"GROUP_ID\" INTEGER," + // 7: groupId
                "\"IS_BLACK\" INTEGER);"); // 8: isBlack
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(3, phone1);
        }
 
        String phone2 = entity.getPhone2();
        if (phone2 != null) {
            stmt.bindString(4, phone2);
        }
 
        String phone3 = entity.getPhone3();
        if (phone3 != null) {
            stmt.bindString(5, phone3);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(7, letters);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(8, groupId);
        }
 
        Boolean isBlack = entity.getIsBlack();
        if (isBlack != null) {
            stmt.bindLong(9, isBlack ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(3, phone1);
        }
 
        String phone2 = entity.getPhone2();
        if (phone2 != null) {
            stmt.bindString(4, phone2);
        }
 
        String phone3 = entity.getPhone3();
        if (phone3 != null) {
            stmt.bindString(5, phone3);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String letters = entity.getLetters();
        if (letters != null) {
            stmt.bindString(7, letters);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(8, groupId);
        }
 
        Boolean isBlack = entity.getIsBlack();
        if (isBlack != null) {
            stmt.bindLong(9, isBlack ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // letters
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // groupId
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isBlack
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLetters(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsBlack(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
